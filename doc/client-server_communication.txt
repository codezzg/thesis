### Broad architecture ###
Both client and server have 3 network endpoints (sockets):

1. a TCP socket used as a reliable channel. This is used for:
	- initial handshake
	- one-time data exchange
	- keepalive

2. an UDP inbound socket.
   The server uses this for receiving client per-frame data (camera position, etc)
   The client uses this for receiving per-frame data (geometry, etc)

3. an UDP outbound socket. See 2.


### Network protocol ###
The client/server network logic / protocol is the following:

1. server starts up, loads its assets, starts the TCP socket, then waits for connections;
2. client connects to the server via TCP, then sends a HELO message;
   it can start initializing its local subsystems which do not depend on server data;
3. server responds with a HELO-ACK along with the one-time data (e.g. shaders, etc);
4. client receives and processes said data, finishes the local setup,
   then responds with a READY signal;
5. server now sends model information, which the client saves. This information is used
   to properly interpret the UDP data that will be sent.
6. client sets up the resources needed for handling the models, then sends RSRC_EXCHANGE_ACK.
7. server sends a START_STREAMING signal and starts sending UDP data.
8. client starts its UDP sockets and the rendering process begins;
   it also starts sending periodic keepalive messages to the server via TCP;
9. at any moment, the server may send an END_STREAMING signal and stop the UDP stream.
   In that case, the client should wait for further messages from the server.
   This is used to send new resources when needed, such as models.
10. if the client either disconnects via a DISCONNECT or an EOF TCP message,
   or fails to send keepalive messages, the server drops it
   (releasing any resources associated with it) and goes back to waiting; back to point 2.

IMPORTANT: currently only 1 client at a time is allowed.

### Data exchange ###
To send TCP resource data (model info, textures, materials, etc),
the server first sends a START_RSRC_EXCHANGE message, to which the
client responds with a RSRC_EXCHANGE_ACK. Before ack'ing, the client may prepare local buffers
to store the incoming data.

The server then sends packets with the header RSRC_TYPE_*, size and other data-specific
information.
The client processes the packets and sends a RSRC_EXCHANGE_ACK to tell the server it successfully
received the resource.
